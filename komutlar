terraform plan (state i refresh eder, real world environment ile terraform tarafini senkronize tutar)

terraform plan -var-file=../terraform.tfvars (for secured)

terraform init (providerlari check edip ilgili plugin i indirir)

terraform apply (tum tf dosyalarindaki providerlari calistirir)

terraform destroy -target aws_instance.myec2 ==> aws_instance provider indaki myec2 isimli resource u destroy eder

terraform show aws_instance.myec2  (state dosyasini goster)

terraform refresh (terraform plan yapildiginda refresh de otomatik calisir)

terraform workspace list

terraform workspace new dev (dev adinda yeni bir workspace yaratmak icin)

terraform workspace select dev (dev workspace ini secmek icin)

terraform workspace show


---

***** Basliklar *****

desired state: resource blogunun altinda belirtilen parametreler desired state olarak kabul edilir

attributes (output): bir islem yapildiktan sonra (orn: s3 bucket yaratildiktan sonraki identifier idsi) output olarak alip set edilebilen parametre

      //apply edildikten sonra ec2 nun public ipsini almak icin
      output "ec2_public_ip" {
        value = "${aws_eip.public_ip.public_ip}"
      }

interpolation: attribute'un (output) un diger bir resource icerisindeki parametreyle iliskilendirilmesi

variables: tf dosyalari icinde kullanilacak dinamik global parametreler

    variable "office_ip" {
      default = "110.110.23.20/16"
    }

    ${var.office_ip} olarak cekilir

provisioners: (user data of aws) creation - deletion esnasinda bir scripti execute ederek herhangi bir programin
yaratilmasini saglar. Orn: EC2 makineleri kurulurken her biri icin nginx kurulmasi gibi

local-exec: komut terraform un kurulu oldugu makinede calisir, ansible playbook burada calistirilir
remote-exec: provider (aws) tarafinda calisir

modules: dry pattern (dont repeat yourself) parcaciklara bolup onlari modul olarak cagirmak icin

  module "myec2" {
    source = "../../modules/ec2"
  }

  ilgili klasordeki ec2 resource unu call eder.


  workspace:

    variable "instance_type" {
      type = "map"
      default = {
        default = "t2.nano"
        dev = "t2.micro"
        prod = "m4.large"
      }
    }


    resource "aws_instance" "myweb" {
      ami = "ami-bf12312"
      instance_type = "${lookup(var.instance_type, terraform.workspace)}"
    }
